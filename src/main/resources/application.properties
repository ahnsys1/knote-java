spring.application.name=knote-java
spring.data.mongodb.uri=mongodb://$MONGO_URL:27017/dev
spring.freemarker.suffix: .ftl


# NETWORK
#docker network create my-net
#docker network rm -f

# docker run --name=knote-java--rm --network=my-net -p 8080:8080 -e MONGO_URL=mongodb://mongodb:27017/dev knote-java

#docker create --name molngodb2 mongo:4.4 mongodb2
#docker run --name mongodb2 -p 27016:27017 --network my-net mongo:4.4
#docker run --name knote-java -p 8080:8080 --network my-net knote-java

#RUN
#docker run --name=mongodb --network=my-net mongo:4.4
#docker run --name=knote-java -p 8080:8080 --network my-net knote-java



#docker run --name mongodb2 -p 27016:27017 --network my-net mongo:4.4 mongodb2

#maven install
#docker run --name mongodb2 --network my-net mongo:4.4
#docker run --name web --network my-net
#docker run --name mongodb2 --network my-net mongo:4.4





#docker run \
#  --name=mongodb2 \
#  --rm \
#  --network=knote mongo



#docker run \
#  --name=knote-java \
#  --rm \
#  --network=knote \
#  -p 8080:8080 \
#  -e MONGO_URL=mongodb://mongo:27017/dev \
#  knote-java



#minikube kubectl cluster-info
#root@knote:/home/mv/Desktop/knote-java2/kube# minikube start --force
#minikube dashboard
# minikube kubectl create deployment knote-java-node --image=registry.k8s.io/e2e-test-images/agnhost:2.39 -- /agnhost netexec --http-port=8080
#root@knote:/home/mv/Desktop/knote-java2/kube# minikube kubectl -- create deployment knote-java-cluster --image=knote-java2 -- netexec --http-port=8080
#minikube kubectl -- apply -f knote.yaml
#kubectl get pods

#kubectl get deployments
#minikube kubectl -- get services
#kubectl get services